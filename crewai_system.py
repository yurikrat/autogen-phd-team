#!/usr/bin/env python3
"""
Sistema CrewAI - Agentes que REALMENTE EXECUTAM.
Focado em A√á√ÉO e ENTREGA, n√£o apenas conversa.
"""

import os
import sys
from pathlib import Path
from datetime import datetime
from dotenv import load_dotenv

from crewai import Agent, Task, Crew, Process
from crewai_tools import FileWriterTool, DirectoryReadTool

load_dotenv()

# Criar diret√≥rio de output
OUTPUT_DIR = Path("./runs") / datetime.now().strftime("%Y%m%d-%H%M%S")
OUTPUT_DIR.mkdir(parents=True, exist_ok=True)

print(f"\nüöÄ RUN INICIADA: {OUTPUT_DIR.absolute()}\n")

# Tools para escrever arquivos
file_writer = FileWriterTool(directory=str(OUTPUT_DIR))
dir_reader = DirectoryReadTool(directory=str(OUTPUT_DIR))


def create_code_executor_agent():
    """Agente que CRIA C√ìDIGO imediatamente."""
    return Agent(
        role='Code Executor',
        goal='Criar c√≥digo funcional IMEDIATAMENTE sem pedir mais informa√ß√µes',
        backstory="""Voc√™ √© um desenvolvedor s√™nior extremamente proativo.
        
        REGRAS ESTRITAS:
        1. N√ÉO pergunte nada - EXECUTE imediatamente
        2. Escolha tecnologias padr√£o (FastAPI, Flask, React)
        3. Crie c√≥digo COMPLETO e FUNCIONAL
        4. Inclua imports, fun√ß√µes, classes, tudo
        5. Use boas pr√°ticas (error handling, valida√ß√£o)
        
        IMPORTANTE: Sua primeira a√ß√£o DEVE ser criar um arquivo de c√≥digo.
        N√£o analise, n√£o planeje - FA√áA!""",
        verbose=True,
        allow_delegation=False,
        tools=[file_writer]
    )


def create_test_writer_agent():
    """Agente que CRIA TESTES imediatamente."""
    return Agent(
        role='Test Writer',
        goal='Criar testes completos para o c√≥digo criado',
        backstory="""Voc√™ √© um QA Engineer que escreve testes pytest/jest.
        
        REGRAS:
        1. Leia o c√≥digo criado
        2. Escreva testes unit√°rios COMPLETOS
        3. Cubra casos de sucesso e erro
        4. Use fixtures e mocks quando necess√°rio
        5. Testes devem ser execut√°veis
        
        Crie arquivo de teste imediatamente!""",
        verbose=True,
        allow_delegation=False,
        tools=[file_writer, dir_reader]
    )


def create_docs_writer_agent():
    """Agente que CRIA DOCUMENTA√á√ÉO imediatamente."""
    return Agent(
        role='Documentation Writer',
        goal='Criar documenta√ß√£o clara e completa',
        backstory="""Voc√™ √© um technical writer que cria docs excelentes.
        
        REGRAS:
        1. Leia o c√≥digo e testes
        2. Crie README.md com:
           - Descri√ß√£o do projeto
           - Como instalar
           - Como usar
           - Exemplos de c√≥digo
           - Como rodar testes
        3. Seja claro e objetivo
        
        Crie documenta√ß√£o imediatamente!""",
        verbose=True,
        allow_delegation=False,
        tools=[file_writer, dir_reader]
    )


def create_tasks(task_description: str, agents: dict):
    """Cria tasks SEQUENCIAIS que for√ßam execu√ß√£o."""
    
    # Task 1: CRIAR C√ìDIGO (obrigat√≥rio)
    task_code = Task(
        description=f"""
        TAREFA: {task_description}
        
        A√á√ÉO IMEDIATA REQUERIDA:
        1. Escolha a tecnologia apropriada (FastAPI para API, React para frontend, etc.)
        2. Crie o arquivo principal com c√≥digo COMPLETO
        3. Inclua TUDO: imports, fun√ß√µes, classes, error handling, valida√ß√£o
        4. O c√≥digo deve ser EXECUT√ÅVEL
        
        IMPORTANTE: N√£o retorne texto explicativo - retorne o C√ìDIGO CRIADO.
        Use file_writer para salvar o arquivo.
        
        Exemplo de nome de arquivo: main.py, app.py, index.js, etc.
        """,
        agent=agents['executor'],
        expected_output="C√≥digo completo criado e salvo em arquivo"
    )
    
    # Task 2: CRIAR TESTES (obrigat√≥rio)
    task_tests = Task(
        description="""
        A√á√ÉO IMEDIATA REQUERIDA:
        1. Leia o c√≥digo criado na task anterior
        2. Crie arquivo de testes (test_*.py ou *.test.js)
        3. Escreva testes unit√°rios COMPLETOS
        4. Cubra casos de sucesso e erro
        5. Use pytest ou jest conforme a linguagem
        
        IMPORTANTE: N√£o retorne texto - retorne os TESTES CRIADOS.
        Use file_writer para salvar o arquivo de testes.
        """,
        agent=agents['tester'],
        expected_output="Testes completos criados e salvos em arquivo",
        context=[task_code]  # Depende do c√≥digo
    )
    
    # Task 3: CRIAR DOCS (obrigat√≥rio)
    task_docs = Task(
        description="""
        A√á√ÉO IMEDIATA REQUERIDA:
        1. Leia c√≥digo e testes criados
        2. Crie README.md completo com:
           - T√≠tulo e descri√ß√£o
           - Instala√ß√£o (requirements/package.json)
           - Como usar (exemplos de c√≥digo)
           - Como rodar testes
           - Estrutura do projeto
        3. Seja claro e objetivo
        
        IMPORTANTE: Crie o README.md agora.
        Use file_writer para salvar.
        """,
        agent=agents['documenter'],
        expected_output="README.md completo criado e salvo",
        context=[task_code, task_tests]  # Depende de c√≥digo e testes
    )
    
    return [task_code, task_tests, task_docs]


def run_crew(task_description: str):
    """Executa o crew com a tarefa."""
    
    print("=" * 80)
    print("CRIANDO AGENTES")
    print("=" * 80)
    
    # Criar agentes
    agents = {
        'executor': create_code_executor_agent(),
        'tester': create_test_writer_agent(),
        'documenter': create_docs_writer_agent()
    }
    
    print("\n‚úÖ 3 agentes criados: Code Executor, Test Writer, Documentation Writer\n")
    
    print("=" * 80)
    print("CRIANDO TASKS SEQUENCIAIS")
    print("=" * 80)
    
    # Criar tasks
    tasks = create_tasks(task_description, agents)
    
    print("\n‚úÖ 3 tasks criadas: C√≥digo ‚Üí Testes ‚Üí Docs\n")
    
    print("=" * 80)
    print("EXECUTANDO CREW")
    print("=" * 80)
    print()
    
    # Criar crew com processo SEQUENCIAL (garante ordem)
    crew = Crew(
        agents=list(agents.values()),
        tasks=tasks,
        process=Process.sequential,  # Executa em ordem
        verbose=True
    )
    
    # EXECUTAR!
    result = crew.kickoff()
    
    print("\n" + "=" * 80)
    print("EXECU√á√ÉO CONCLU√çDA")
    print("=" * 80)
    
    # Listar arquivos criados
    files = list(OUTPUT_DIR.glob("*"))
    
    print(f"\nüì¶ Artefatos criados ({len(files)}):")
    for f in files:
        size = f.stat().st_size
        print(f"  ‚úÖ {f.name} ({size} bytes)")
    
    print(f"\nüìÅ Localiza√ß√£o: {OUTPUT_DIR.absolute()}")
    print(f"\nüìä Resultado final:\n{result}\n")
    
    return result, OUTPUT_DIR


def main():
    """Fun√ß√£o principal."""
    
    if len(sys.argv) < 2:
        print("‚ùå ERRO: Task n√£o fornecida.")
        print("   Uso: python crewai_system.py \"Sua tarefa aqui...\"")
        sys.exit(1)
    
    task_description = " ".join(sys.argv[1:])
    
    print("\n" + "=" * 80)
    print("üéº CREWAI SYSTEM - AGENTES QUE EXECUTAM")
    print("=" * 80)
    print(f"\nüìã TAREFA: {task_description}\n")
    
    try:
        result, output_dir = run_crew(task_description)
        
        print("\n" + "=" * 80)
        print("‚úÖ SUCESSO - ARTEFATOS CRIADOS")
        print("=" * 80)
        print(f"\nüìÇ Veja os arquivos em: {output_dir.absolute()}\n")
        
    except Exception as e:
        print(f"\n‚ùå ERRO: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()

