#!/usr/bin/env python3
"""
Crew Evolved - Vers√£o evolu√≠da com valida√ß√£o, desafios din√¢micos e mem√≥ria.

Evolu√ß√µes:
1. Valida√ß√£o autom√°tica de c√≥digo (executa, testa, corrige)
2. Desafios din√¢micos contextuais (n√£o gen√©ricos)
3. Mem√≥ria de execu√ß√µes (aprende com hist√≥rico)
4. Feedback loop at√© c√≥digo passar
"""

import os
import sys
import time
from pathlib import Path
from datetime import datetime
from dotenv import load_dotenv

# Importar crew_advanced
sys.path.insert(0, str(Path(__file__).parent))
from crew_advanced import (
    create_architect_agent, create_backend_dev_agent, create_qa_engineer_agent,
    create_security_expert_agent, create_tech_writer_agent, create_tasks,
    ARTIFACTS_BY_AGENT, OUTPUT_DIR
)

from crewai import Crew, Process

# Importar sistemas de valida√ß√£o
from validation.code_validator import validate_code_directory
from validation.dynamic_challenger import challenge_code_directory
from memory.execution_memory import ExecutionMemory

load_dotenv()


def run_evolved_crew(task_description: str, max_iterations: int = 2):
    """
    Executa crew com valida√ß√£o, desafios e mem√≥ria.
    
    Args:
        task_description: Descri√ß√£o da tarefa
        max_iterations: M√°ximo de itera√ß√µes de corre√ß√£o
    """
    
    print("\n" + "=" * 80)
    print("üß¨ CREW EVOLVED - VERS√ÉO COM VALIDA√á√ÉO E APRENDIZADO")
    print("=" * 80)
    print(f"\nüìã Tarefa: {task_description}")
    print(f"üìÅ Output: {OUTPUT_DIR.absolute()}\n")
    print("=" * 80 + "\n")
    
    # Inicializar mem√≥ria
    memory = ExecutionMemory()
    
    # 1. BUSCAR EXECU√á√ïES SIMILARES
    print("üîç Buscando execu√ß√µes similares no hist√≥rico...")
    similar = memory.find_similar_executions(task_description, limit=3)
    
    if similar:
        print(f"\n‚úÖ Encontradas {len(similar)} execu√ß√µes similares:")
        for i, exec_info in enumerate(similar, 1):
            status = "‚úÖ Sucesso" if exec_info['success'] else "‚ùå Falhou"
            print(f"   {i}. {status} - {exec_info['timestamp'][:10]} - "
                  f"{exec_info['total_artifacts']} artefatos")
        
        # Mostrar padr√µes de sucesso
        patterns = memory.get_success_patterns()
        if patterns:
            print("\nüí° Padr√µes de sucesso identificados:")
            for pattern in patterns:
                print(f"   ‚Ä¢ {pattern['description']}")
    else:
        print("   ‚ÑπÔ∏è  Nenhuma execu√ß√£o similar encontrada (primeira vez)")
    
    print("\n" + "=" * 80 + "\n")
    
    start_time = time.time()
    iteration = 1
    validation_passed = False
    
    while iteration <= max_iterations and not validation_passed:
        print(f"\n{'üîÑ ITERA√á√ÉO ' + str(iteration) if iteration > 1 else 'üöÄ EXECU√á√ÉO INICIAL'}")
        print("=" * 80 + "\n")
        
        try:
            # 2. CRIAR AGENTES
            print("üë• Criando agentes especializados...\n")
            agents = {
                'architect': create_architect_agent(),
                'backend': create_backend_dev_agent(),
                'qa': create_qa_engineer_agent(),
                'security': create_security_expert_agent(),
                'writer': create_tech_writer_agent()
            }
            
            # 3. CRIAR TASKS
            print("üìã Criando tasks sequenciais...\n")
            tasks = create_tasks(task_description, agents)
            
            # 4. EXECUTAR CREW
            print("üéº Iniciando execu√ß√£o do crew...\n")
            print("=" * 80 + "\n")
            
            crew = Crew(
                agents=list(agents.values()),
                tasks=tasks,
                process=Process.sequential,
                verbose=True
            )
            
            result = crew.kickoff()
            
            print("\n" + "=" * 80)
            print("‚úÖ EXECU√á√ÉO DO CREW CONCLU√çDA")
            print("=" * 80 + "\n")
            
            # 5. VALIDA√á√ÉO AUTOM√ÅTICA
            print("\n" + "=" * 80)
            print("üîç FASE DE VALIDA√á√ÉO")
            print("=" * 80)
            
            validation_passed, feedback = validate_code_directory(OUTPUT_DIR)
            
            if validation_passed:
                print("\n‚úÖ VALIDA√á√ÉO PASSOU! C√≥digo est√° pronto.")
                break
            else:
                print("\n‚ö†Ô∏è  VALIDA√á√ÉO FALHOU!")
                print(feedback)
                
                if iteration < max_iterations:
                    print(f"\nüîÑ Iniciando itera√ß√£o {iteration + 1} para corre√ß√µes...")
                    iteration += 1
                else:
                    print(f"\n‚ö†Ô∏è  M√°ximo de itera√ß√µes ({max_iterations}) atingido.")
                    print("   C√≥digo gerado mas pode ter problemas.")
        
        except Exception as e:
            print(f"\n‚ùå ERRO NA EXECU√á√ÉO: {e}")
            import traceback
            traceback.print_exc()
            break
    
    execution_time = time.time() - start_time
    
    # 6. DESAFIOS DIN√ÇMICOS
    print("\n" + "=" * 80)
    print("üéØ FASE DE DESAFIOS DIN√ÇMICOS")
    print("=" * 80)
    
    challenges = challenge_code_directory(OUTPUT_DIR)
    
    total_challenges = sum(len(c) for c in challenges.values())
    print(f"\n‚úÖ {total_challenges} desafios contextuais gerados!")
    
    # 7. SALVAR NA MEM√ìRIA
    print("\n" + "=" * 80)
    print("üíæ SALVANDO NA MEM√ìRIA")
    print("=" * 80 + "\n")
    
    # Contar artefatos
    total_artifacts = sum(len(artifacts) for artifacts in ARTIFACTS_BY_AGENT.values())
    
    # Coletar erros se houver
    errors = []
    if not validation_passed:
        errors.append("Valida√ß√£o n√£o passou completamente")
    
    # Salvar execu√ß√£o
    execution_id = memory.save_execution(
        task_description=task_description,
        output_dir=OUTPUT_DIR,
        success=validation_passed,
        validation_passed=validation_passed,
        total_artifacts=total_artifacts,
        execution_time=execution_time,
        agents_used=list(ARTIFACTS_BY_AGENT.keys()),
        errors=errors if errors else None,
        metadata={
            'iterations': iteration,
            'challenges_generated': total_challenges
        }
    )
    
    # Salvar artefatos
    all_artifacts = []
    for agent_name, artifacts in ARTIFACTS_BY_AGENT.items():
        all_artifacts.extend(artifacts)
    
    if all_artifacts:
        memory.save_artifacts(execution_id, all_artifacts)
    
    # 8. ESTAT√çSTICAS FINAIS
    print("\n" + "=" * 80)
    print("üìä RESUMO FINAL")
    print("=" * 80)
    
    print(f"\n‚úÖ Execu√ß√£o ID: {execution_id}")
    print(f"‚è±Ô∏è  Tempo total: {execution_time:.1f}s")
    print(f"üì¶ Artefatos criados: {total_artifacts}")
    print(f"üîÑ Itera√ß√µes: {iteration}")
    print(f"‚úÖ Valida√ß√£o: {'PASSOU' if validation_passed else 'FALHOU'}")
    print(f"üéØ Desafios gerados: {total_challenges}")
    print(f"üìÅ Localiza√ß√£o: {OUTPUT_DIR.absolute()}")
    
    # Mostrar estat√≠sticas gerais
    print("\n")
    memory.print_statistics()
    
    # Li√ß√µes aprendidas
    lessons = memory.learn_from_failures()
    if lessons and len(lessons) > 1:
        print("\nüí° LI√á√ïES APRENDIDAS COM FALHAS:")
        for lesson in lessons[:3]:
            print(f"   ‚Ä¢ {lesson}")
    
    print("\n" + "=" * 80)
    print("üéâ CREW EVOLVED CONCLU√çDO!")
    print("=" * 80 + "\n")


def main():
    if len(sys.argv) < 2:
        print("‚ùå Uso: python crew_evolved.py \"Sua tarefa...\"")
        sys.exit(1)
    
    task_description = " ".join(sys.argv[1:])
    
    try:
        run_evolved_crew(task_description, max_iterations=2)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Execu√ß√£o interrompida pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå ERRO FATAL: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()

