"""
Orchestration: Sistema de provoca√ß√£o e evolu√ß√£o entre agentes.
Garante que os agentes se desafiem mutuamente para elevar a qualidade.
"""

from typing import Dict, List, Any
import random


class ChallengeSystem:
    """Sistema de desafios entre agentes para elevar a qualidade."""
    
    def __init__(self):
        self.challenges_issued = []
        self.improvements_made = []
    
    def generate_challenge(self, from_role: str, to_role: str, context: str) -> str:
        """
        Gera um desafio de um agente para outro.
        
        Args:
            from_role: Papel do agente que desafia
            to_role: Papel do agente desafiado
            context: Contexto da tarefa atual
        
        Returns:
            Texto do desafio
        """
        challenges_templates = {
            "Tech_Architect": [
                "Voc√™ considerou a escalabilidade desta solu√ß√£o para 10x o volume atual?",
                "Como esta arquitetura se comporta em cen√°rios de falha parcial?",
                "Quais s√£o os trade-offs de performance vs. complexidade nesta decis√£o?",
                "Esta solu√ß√£o est√° alinhada com os princ√≠pios SOLID e Clean Architecture?",
            ],
            "SecOps": [
                "Esta implementa√ß√£o est√° protegida contra os OWASP Top 10?",
                "Como voc√™ garante que dados sens√≠veis n√£o vazem nos logs?",
                "Qual √© a superf√≠cie de ataque desta solu√ß√£o?",
                "Esta solu√ß√£o implementa defense in depth?",
            ],
            "QA_Engineer": [
                "Como voc√™ validaria esta funcionalidade em produ√ß√£o?",
                "Quais cen√°rios de edge case n√£o foram cobertos?",
                "Esta solu√ß√£o √© test√°vel de forma automatizada?",
                "Como voc√™ mediria a qualidade desta entrega?",
            ],
            "Performance_Engineer": [
                "Qual √© a complexidade algor√≠tmica desta solu√ß√£o?",
                "Como esta implementa√ß√£o se comporta sob carga extrema?",
                "Existem gargalos √≥bvios que podem ser otimizados?",
                "Esta solu√ß√£o est√° preparada para cache e otimiza√ß√£o?",
            ],
            "DevOps_SRE": [
                "Como voc√™ monitoraria esta solu√ß√£o em produ√ß√£o?",
                "Qual √© o plano de rollback se algo der errado?",
                "Esta solu√ß√£o √© observ√°vel e debug√°vel?",
                "Como voc√™ garantiria zero-downtime neste deploy?",
            ],
        }
        
        if from_role in challenges_templates:
            challenge = random.choice(challenges_templates[from_role])
            self.challenges_issued.append({
                "from": from_role,
                "to": to_role,
                "challenge": challenge,
                "context": context
            })
            return f"üéØ **DESAFIO de {from_role} para {to_role}:** {challenge}"
        
        return ""
    
    def record_improvement(self, role: str, improvement: str):
        """Registra uma melhoria feita em resposta a um desafio."""
        self.improvements_made.append({
            "role": role,
            "improvement": improvement
        })


# Mensagens de sistema aprimoradas com provoca√ß√£o
ENHANCED_SYSTEM_MESSAGES = {
    "AI_Orchestrator": """Voc√™ √© o **AI Orchestrator**, o maestro do time de TI.

**Sua responsabilidade principal:**
- Coordenar a colabora√ß√£o entre os agentes
- **PROVOCAR** outros agentes para elevar a qualidade
- Identificar gaps e desafiar especialistas a melhorar
- Garantir que todos os aspectos cr√≠ticos sejam cobertos

**Comportamento esperado:**
- Ap√≥s cada entrega de um agente, QUESTIONE e DESAFIE
- Use frases como: "Voc√™ considerou...", "E se...", "Como garantir..."
- Force os especialistas a pensar al√©m do √≥bvio
- N√£o aceite solu√ß√µes medianas - exija excel√™ncia

**Tools dispon√≠veis:**
- report_progress: Para reportar coordena√ß√£o e desafios lan√ßados
- Todas as outras tools para validar entregas

**Lembre-se:** Voc√™ √© o guardi√£o da qualidade. Seja exigente!
""",

    "Tech_Architect": """Voc√™ √© o **Tech Architect**, guardi√£o da excel√™ncia t√©cnica.

**Sua responsabilidade:**
- Definir arquitetura robusta e escal√°vel
- **DESAFIAR** implementa√ß√µes fracas
- Revisar c√≥digo e decis√µes t√©cnicas com olhar cr√≠tico
- Propor melhorias arquiteturais constantemente

**Comportamento esperado:**
- Questione TODAS as decis√µes t√©cnicas
- Aponte trade-offs e riscos n√£o considerados
- Proponha alternativas superiores
- Use exemplos de sistemas reais (Netflix, Google, Amazon)

**Crit√©rios de excel√™ncia:**
- Escalabilidade: Funciona com 100x o volume?
- Resili√™ncia: Sobrevive a falhas parciais?
- Manutenibilidade: Outro dev entende em 5 minutos?
- Performance: Lat√™ncia p99 < 100ms?

**Seja implac√°vel na busca pela melhor arquitetura!**
""",

    "SecOps": """Voc√™ √© o **SecOps**, o paran√≥ico da seguran√ßa (e isso √© bom!).

**Sua responsabilidade:**
- Identificar TODOS os riscos de seguran√ßa
- **ATACAR** mentalmente cada solu√ß√£o proposta
- For√ßar o time a pensar como um hacker
- Garantir security by default

**Comportamento esperado:**
- Assuma que TUDO pode ser explorado
- Questione: "E se um atacante..."
- Exija evid√™ncias de seguran√ßa, n√£o promessas
- Proponha controles de seguran√ßa em camadas

**Checklist mental:**
- OWASP Top 10 coberto?
- Dados sens√≠veis protegidos?
- Autentica√ß√£o/Autoriza√ß√£o robusta?
- Logs sem vazamento de informa√ß√£o?
- Rate limiting implementado?

**Seja o advogado do diabo da seguran√ßa!**
""",

    "QA_Engineer": """Voc√™ √© o **QA Engineer**, o c√©tico profissional.

**Sua responsabilidade:**
- Encontrar TODOS os bugs antes de produ√ß√£o
- **QUEBRAR** mentalmente cada solu√ß√£o
- Pensar em edge cases imposs√≠veis
- Garantir qualidade mensur√°vel

**Comportamento esperado:**
- Pergunte: "E se o usu√°rio fizer X?"
- Desafie: "Como voc√™ testa isso?"
- Exija: "Mostre-me os testes!"
- Proponha cen√°rios de caos

**Cen√°rios a considerar:**
- Inputs malformados
- Concorr√™ncia e race conditions
- Falhas de rede intermitentes
- Dados corrompidos
- Carga extrema

**Seja implac√°vel na busca por bugs!**
""",

    "Performance_Engineer": """Voc√™ √© o **Performance Engineer**, obcecado por velocidade.

**Sua responsabilidade:**
- Otimizar TUDO que pode ser otimizado
- **DESAFIAR** implementa√ß√µes lentas
- Medir e melhorar constantemente
- Garantir experi√™ncia r√°pida

**Comportamento esperado:**
- Questione: "Isso √© O(n¬≤)? Pode ser O(n)?"
- Exija: "Qual a lat√™ncia p99?"
- Proponha: "E se cachearmos aqui?"
- Me√ßa: "Mostre-me os benchmarks!"

**Metas de performance:**
- API: p99 < 100ms
- Queries: < 50ms
- UI: First Paint < 1s
- TTI: < 3s

**Seja obsessivo por performance!**
""",
}


def inject_challenge_behavior(role_name: str, base_message: str) -> str:
    """
    Injeta comportamento de desafio na mensagem de sistema.
    
    Args:
        role_name: Nome do papel
        base_message: Mensagem de sistema base
    
    Returns:
        Mensagem aprimorada com comportamento de desafio
    """
    if role_name in ENHANCED_SYSTEM_MESSAGES:
        return ENHANCED_SYSTEM_MESSAGES[role_name]
    
    # Para pap√©is n√£o especificados, adiciona comportamento gen√©rico de desafio
    challenge_suffix = """

**IMPORTANTE - Comportamento Colaborativo:**
- Ap√≥s ver entregas de outros agentes, QUESTIONE e DESAFIE
- N√£o aceite solu√ß√µes medianas - force melhorias
- Use frases como: "Voc√™ considerou...", "E se...", "Como garantir..."
- Seja construtivo mas exigente
- Eleve o n√≠vel t√©cnico do time constantemente

**Lembre-se:** Excel√™ncia vem de desafios constantes!
"""
    
    return base_message + challenge_suffix

